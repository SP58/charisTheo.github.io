{"version":3,"sources":["app.js","portfolio.ctr.js","portfolio-bundle.min.js","share-listener.fac.js"],"names":["app","angular","module","config","$mdThemingProvider","theme","primaryPalette","accentPalette","directive","scope","restrict","templateUrl","onContactClick","link","elm","attrs","images","JSON","parse","selectedImage","selectImage","index","PortfolioCtrl","$scope","$http","$mdSidenav","$mdMedia","ShareListener","$location","$anchorScroll","$mdToast","get","then","response","projects","data","shareButtonListener","listener","copyToClipboard","nightMode","showPWAInstallButton","deferredPromptEvent","undefined","documentLoaded","twitterButtonInitialised","cardToggle","selectedCardIndex","selectedCard","yOffset","toggleSocialLinks","showSocialLinks","isOpen","toggle","$watch","isIos","isInStandaloneMode","console","log","navigator","serviceWorker","register","registration","onupdatefound","controller","installing","textContent","newServiceWorker","state","show","simple","error","onLine","twitterButtonScript","document","createElement","type","src","charset","async","querySelector","appendChild","onload","handleOfflineEvent","setTimeout","hitType","querySelectorAll","forEach","button","eventAction","addEventListener","event","eventCategory","eventLabel","currentTarget","getAttribute","dataArr","splice","join","window","ga","selectCard","$event","$index","hash","history","replaceState","title","cancelBubble","onFavouriteClick","_this","iconContent","children","toggleSideNav","installPWA","prompt","userChoice","choiceResult","outcome","e","preventDefault","handleOnlineEvent","project","projectsRuntimeCache","keys","projectMedia","filter","key","url","indexOf","id","length","classList","add","hideOfflineUnavailableProjects","remove","test","userAgent","platform","maxTouchPoints","matchMedia","matches","standalone","$inject","factory","str","el","value","body","select","execCommand","removeChild","hideDelay","share","text","href"],"mappings":"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","file":"portfolio-bundle.min.js","sourcesContent":["let app = angular.module('Portfolio', ['ngMaterial', 'ngAnimate']);\n    \napp\n.config(function($mdThemingProvider) {\n    $mdThemingProvider.theme('default')\n        .primaryPalette('deep-purple')\n        .accentPalette('green');\n})\n.directive('svgLogo', function() {\n    return {\n        scope: false,\n        restrict: 'E',\n        templateUrl: './../partials/compressed/svgLogo.html'\n    }\n})\n.directive('socialLinks', function() {\n    return {\n        scope: false,\n        restrict: 'E',\n        templateUrl: '/partials/compressed/socialLinks.html'\n    }\n})\n.directive('sideNavList', function() {\n    return {\n        scope: {\n            onContactClick: '&'\n        },\n        restrict: 'E',\n        templateUrl: '/partials/compressed/sidenavList.html',\n    }\n})\n.directive('imagePicker', function() {\n    return {\n        scope: false,\n        restrict: 'E',\n        templateUrl: '/partials/compressed/imagePicker.html',\n        link: function(scope, elm, attrs) {\n            if (!attrs.images) return;\n            scope.images = JSON.parse(attrs.images);\n            scope.selectedImage = 0;\n            scope.selectImage = function(index) {\n                scope.selectedImage = index;\n            }\n        }\n    }\n})\n.directive('frameworksImages', function() {\n    return {\n        scope: false,\n        restrict: 'E',\n        templateUrl: '/partials/compressed/frameworksImages.html',\n        link: function(scope, elm, attrs) {\n            if (!attrs.images) return;\n            scope.images = JSON.parse(attrs.images);\n        }\n    }\n});\n","(function(){\n    'use strict';\n\n    angular\n        .module('Portfolio')\n        .controller('PortfolioCtrl', PortfolioCtrl);\n\n    PortfolioCtrl.$inject = ['$scope', '$http', '$mdSidenav', '$mdMedia', 'ShareListener', '$location', '$anchorScroll', '$mdToast'];\n\n    function PortfolioCtrl($scope, $http, $mdSidenav, $mdMedia, ShareListener, $location, $anchorScroll, $mdToast) {\n        $http.get('projects-data.json').then(function(response) {\n            $scope.projects = response.data;\n        });\n        $scope.$mdMedia = $mdMedia;\n        $scope.shareButtonListener = ShareListener.listener;\n        $scope.copyToClipboard = ShareListener.copyToClipboard;\n        $scope.nightMode = false;\n        $scope.showPWAInstallButton = false;\n        $scope.deferredPromptEvent = undefined;\n        $scope.documentLoaded = false;\n        $scope.twitterButtonInitialised = false;\n        $scope.cardToggle = false;\n        $scope.selectedCardIndex = undefined;\n        $scope.selectedCard = undefined;\n        $anchorScroll.yOffset = 72;\n\n        $scope.toggleSocialLinks = function() {\n            $scope.showSocialLinks = !$scope.showSocialLinks;\n            // close side nav if open\n            if ($mdSidenav('left').isOpen) {\n                $mdSidenav('left').toggle();\n            }\n        };\n        // $scope.togglePeoplePerHourWidget = function() {\n        //     $scope.showPeoplePerHourWidget = !$scope.showPeoplePerHourWidget;\n        //     // close side nav if open\n        //     if ($mdSidenav('left').isOpen) {\n        //         $mdSidenav('left').toggle();\n        //     }\n        // };\n\n        $scope.$watch('$viewContentLoaded', function(){\n            const isNightModePreferred = $mdMedia('(prefers-color-scheme: dark)');\n            if (isNightModePreferred) {\n                $scope.nightMode = true;\n            }\n            $scope.documentLoaded = true;\n            if (!isIos && !isInStandaloneMode) {\n                // * show install button\n                console.log('show install button');\n                $scope.showPWAInstallButton = true;\n            }\n\n            if ('serviceWorker' in navigator) { \n                navigator.serviceWorker.register('/service-worker.js', {scope: '/'})\n                .then(function(registration) {\n                    registration.onupdatefound = () => {\n                        const newServiceWorker = registration.installing;\n                        newServiceWorker.onstatechange = () => {\n                            switch (newServiceWorker.state) {\n                                case 'installing': \n                                    if (navigator.serviceWorker.controller) {\n                                        $mdToast.show(\n                                            $mdToast\n                                                .simple()\n                                                .textContent('A new version of the website is available 🙋. <a onclick=\"window.location.reload()\">Reload</a> the page to see the new goodness 💠')\n                                        );\n                                    }\n                                    break;\n                                default:\n                                    break;\n                            }\n                        }\n                    }\n                    console.log('Service Worker registration succeeded. Scope is ' + registration.scope);\n                    \n                }).catch(function(error) {\n                    console.log('Service Worker registration failed with ' + error);\n                });\n\n            }\n\n            // * check network status and handle offline status\n            if (!navigator.onLine) {\n                handleOfflineEvent();\n            } else {\n                // * fetch Twitter script for follow button\n                var twitterButtonScript = document.createElement(\"script\");\n                twitterButtonScript.type = \"text/javascript\"\n                twitterButtonScript.src = \"https://platform.twitter.com/widgets.js\";\n                twitterButtonScript.charset = \"utf-8\";\n                twitterButtonScript.async = true;\n                document.querySelector('head').appendChild(twitterButtonScript);\n                twitterButtonScript.onload = function() {\n                    $scope.twitterButtonInitialised = true;\n                }\n            }\n\n\n            // * Attach event listeners for sending data to google analytics\n            setTimeout(() => {\n                document.querySelectorAll('.md-button').forEach(button => {\n                    button.addEventListener('click', (event) => {\n                        const data = event.currentTarget.getAttribute('data-analytics');\n                        const dataArr = data.split(' ');\n                        const eventCategory = dataArr.splice(0, 1)[0];\n                        const eventLabel = dataArr.join(' ');\n\n                        window.ga('send', {\n                            hitType: 'event',\n                            eventAction: 'click',\n                            eventCategory,\n                            eventLabel\n                        });\n                    });\n                });\n            }, 1000);\n        });\n\n        $scope.selectCard = function($event, $index) {\n            if ($scope.selectedCardIndex != $index) {\n                // select card\n                $scope.selectedCard = $scope.projects[$index];\n                $scope.selectedCardIndex = $index;\n                // scroll to top of card\n                $location.hash(\"project\" + $index);\n                $anchorScroll(\"project\" + $index);\n            } else {\n                // unselect card\n                $scope.selectedCardIndex = undefined;\n                $scope.selectedCard = undefined;\n                // $location.url('');\n                window.history.replaceState({}, document.title, '/');\n            }\n            $event.cancelBubble = true; // prevent from firing again\n        };\n\n        $scope.onFavouriteClick = function($event) {\n            // TODO: Add animation transition\n            let _this = $event.currentTarget;\n            let iconContent = _this.children[0].textContent;\n            console.log(iconContent);\n            if (iconContent == 'favorite') {\n                _this.children[0].textContent = 'favorite_border';\n            } else {\n                _this.children[0].textContent = 'favorite';\n            }\n            $event.cancelBubble = true; // prevent the card from toggling\n        };\n\n        $scope.toggleSideNav = function() {\n            $mdSidenav('left').toggle();\n        };\n\n        $scope.installPWA = function() {\n            console.log('Installing PWA');\n\n            $scope.showPWAInstallButton = false;\n            $scope.deferredPromptEvent.prompt();\n            $scope.deferredPromptEvent.userChoice.then(function(choiceResult) {\n                // * track PWA installs\n                ga('send', 'event', 'A2HS', choiceResult.outcome); // 'dismissed' or 'accepted'\n                $scope.deferredPromptEvent = null;\n            });\n        };\n\n        window.addEventListener('beforeinstallprompt', function(e) {\n            e.preventDefault(); \n            $scope.deferredPromptEvent = e; \n        });\n\n        window.addEventListener('offline', () => { handleOfflineEvent() });\n        window.addEventListener('online', () => { handleOnlineEvent() });\n        \n        const hideOfflineUnavailableProjects = () => {\n            const projects = document.querySelectorAll('.project')\n            caches.open('runtime-projects-media').then(projectsRuntimeCache => {\n                projects.forEach(project => {\n                    projectsRuntimeCache.keys().then(keys => {\n                        const projectMedia = keys.filter(key => key.url.indexOf(project.id) !== -1);\n                        if (!projectMedia.length) {\n                            // * reduce opacity of unavailable project pages\n                            project.classList.add('unavailable-offline');\n                        }\n                    });\n                });\n            });\n        }\n\n        const handleOfflineEvent = () => {\n            $mdToast.show(\n                $mdToast.simple().textContent('You are offline 📴')\n            );\n\n            hideOfflineUnavailableProjects();\n        }\n\n        const handleOnlineEvent = () => {\n            $mdToast.show(\n                $mdToast.simple().textContent('You are back online! 🎉')\n            );\n\n            const projects = document.querySelectorAll('.project');\n            projects.forEach(project => {\n                project.classList.remove('unavailable-offline');\n            });\n        }\n\n        // Detects if device is an iOS (including iOS 13) \n        const isIos = /iPad|iPhone|iPod/.test(navigator.userAgent) || (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);\n\n        // Detects if device is in standalone mode\n        const isInStandaloneMode = window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone === true;\n        \n    }\n\n})();","let app = angular.module('Portfolio', ['ngMaterial', 'ngAnimate']);\n    \napp\n.config([\"$mdThemingProvider\", function($mdThemingProvider) {\n    $mdThemingProvider.theme('default')\n        .primaryPalette('deep-purple')\n        .accentPalette('green');\n}])\n.directive('svgLogo', function() {\n    return {\n        scope: false,\n        restrict: 'E',\n        templateUrl: './../partials/compressed/svgLogo.html'\n    }\n})\n.directive('socialLinks', function() {\n    return {\n        scope: false,\n        restrict: 'E',\n        templateUrl: '/partials/compressed/socialLinks.html'\n    }\n})\n.directive('sideNavList', function() {\n    return {\n        scope: {\n            onContactClick: '&'\n        },\n        restrict: 'E',\n        templateUrl: '/partials/compressed/sidenavList.html',\n    }\n})\n.directive('imagePicker', function() {\n    return {\n        scope: false,\n        restrict: 'E',\n        templateUrl: '/partials/compressed/imagePicker.html',\n        link: function(scope, elm, attrs) {\n            if (!attrs.images) return;\n            scope.images = JSON.parse(attrs.images);\n            scope.selectedImage = 0;\n            scope.selectImage = function(index) {\n                scope.selectedImage = index;\n            }\n        }\n    }\n})\n.directive('frameworksImages', function() {\n    return {\n        scope: false,\n        restrict: 'E',\n        templateUrl: '/partials/compressed/frameworksImages.html',\n        link: function(scope, elm, attrs) {\n            if (!attrs.images) return;\n            scope.images = JSON.parse(attrs.images);\n        }\n    }\n});\n\n(function(){\n    'use strict';\n\n    angular\n        .module('Portfolio')\n        .controller('PortfolioCtrl', PortfolioCtrl);\n\n    PortfolioCtrl.$inject = ['$scope', '$http', '$mdSidenav', '$mdMedia', 'ShareListener', '$location', '$anchorScroll', '$mdToast'];\n\n    function PortfolioCtrl($scope, $http, $mdSidenav, $mdMedia, ShareListener, $location, $anchorScroll, $mdToast) {\n        $http.get('projects-data.json').then(function(response) {\n            $scope.projects = response.data;\n        });\n        $scope.$mdMedia = $mdMedia;\n        $scope.shareButtonListener = ShareListener.listener;\n        $scope.copyToClipboard = ShareListener.copyToClipboard;\n        $scope.nightMode = false;\n        $scope.showPWAInstallButton = false;\n        $scope.deferredPromptEvent = undefined;\n        $scope.documentLoaded = false;\n        $scope.twitterButtonInitialised = false;\n        $scope.cardToggle = false;\n        $scope.selectedCardIndex = undefined;\n        $scope.selectedCard = undefined;\n        $anchorScroll.yOffset = 72;\n\n        $scope.toggleSocialLinks = function() {\n            $scope.showSocialLinks = !$scope.showSocialLinks;\n            // close side nav if open\n            if ($mdSidenav('left').isOpen) {\n                $mdSidenav('left').toggle();\n            }\n        };\n        // $scope.togglePeoplePerHourWidget = function() {\n        //     $scope.showPeoplePerHourWidget = !$scope.showPeoplePerHourWidget;\n        //     // close side nav if open\n        //     if ($mdSidenav('left').isOpen) {\n        //         $mdSidenav('left').toggle();\n        //     }\n        // };\n\n        $scope.$watch('$viewContentLoaded', function(){\n            const isNightModePreferred = $mdMedia('(prefers-color-scheme: dark)');\n            if (isNightModePreferred) {\n                $scope.nightMode = true;\n            }\n            $scope.documentLoaded = true;\n            if (!isIos && !isInStandaloneMode) {\n                // * show install button\n                console.log('show install button');\n                $scope.showPWAInstallButton = true;\n            }\n\n            if ('serviceWorker' in navigator) { \n                navigator.serviceWorker.register('/service-worker.js', {scope: '/'})\n                .then(function(registration) {\n                    registration.onupdatefound = () => {\n                        const newServiceWorker = registration.installing;\n                        newServiceWorker.onstatechange = () => {\n                            switch (newServiceWorker.state) {\n                                case 'installing': \n                                    if (navigator.serviceWorker.controller) {\n                                        $mdToast.show(\n                                            $mdToast\n                                                .simple()\n                                                .textContent('A new version of the website is available 🙋. <a onclick=\"window.location.reload()\">Reload</a> the page to see the new goodness 💠')\n                                        );\n                                    }\n                                    break;\n                                default:\n                                    break;\n                            }\n                        }\n                    }\n                    console.log('Service Worker registration succeeded. Scope is ' + registration.scope);\n                    \n                }).catch(function(error) {\n                    console.log('Service Worker registration failed with ' + error);\n                });\n\n            }\n\n            // * check network status and handle offline status\n            if (!navigator.onLine) {\n                handleOfflineEvent();\n            } else {\n                // * fetch Twitter script for follow button\n                var twitterButtonScript = document.createElement(\"script\");\n                twitterButtonScript.type = \"text/javascript\"\n                twitterButtonScript.src = \"https://platform.twitter.com/widgets.js\";\n                twitterButtonScript.charset = \"utf-8\";\n                twitterButtonScript.async = true;\n                document.querySelector('head').appendChild(twitterButtonScript);\n                twitterButtonScript.onload = function() {\n                    $scope.twitterButtonInitialised = true;\n                }\n            }\n\n\n            // * Attach event listeners for sending data to google analytics\n            setTimeout(() => {\n                document.querySelectorAll('.md-button').forEach(button => {\n                    button.addEventListener('click', (event) => {\n                        const data = event.currentTarget.getAttribute('data-analytics');\n                        const dataArr = data.split(' ');\n                        const eventCategory = dataArr.splice(0, 1)[0];\n                        const eventLabel = dataArr.join(' ');\n\n                        window.ga('send', {\n                            hitType: 'event',\n                            eventAction: 'click',\n                            eventCategory,\n                            eventLabel\n                        });\n                    });\n                });\n            }, 1000);\n        });\n\n        $scope.selectCard = function($event, $index) {\n            if ($scope.selectedCardIndex != $index) {\n                // select card\n                $scope.selectedCard = $scope.projects[$index];\n                $scope.selectedCardIndex = $index;\n                // scroll to top of card\n                $location.hash(\"project\" + $index);\n                $anchorScroll(\"project\" + $index);\n            } else {\n                // unselect card\n                $scope.selectedCardIndex = undefined;\n                $scope.selectedCard = undefined;\n                // $location.url('');\n                window.history.replaceState({}, document.title, '/');\n            }\n            $event.cancelBubble = true; // prevent from firing again\n        };\n\n        $scope.onFavouriteClick = function($event) {\n            // TODO: Add animation transition\n            let _this = $event.currentTarget;\n            let iconContent = _this.children[0].textContent;\n            console.log(iconContent);\n            if (iconContent == 'favorite') {\n                _this.children[0].textContent = 'favorite_border';\n            } else {\n                _this.children[0].textContent = 'favorite';\n            }\n            $event.cancelBubble = true; // prevent the card from toggling\n        };\n\n        $scope.toggleSideNav = function() {\n            $mdSidenav('left').toggle();\n        };\n\n        $scope.installPWA = function() {\n            console.log('Installing PWA');\n\n            $scope.showPWAInstallButton = false;\n            $scope.deferredPromptEvent.prompt();\n            $scope.deferredPromptEvent.userChoice.then(function(choiceResult) {\n                // * track PWA installs\n                ga('send', 'event', 'A2HS', choiceResult.outcome); // 'dismissed' or 'accepted'\n                $scope.deferredPromptEvent = null;\n            });\n        };\n\n        window.addEventListener('beforeinstallprompt', function(e) {\n            e.preventDefault(); \n            $scope.deferredPromptEvent = e; \n        });\n\n        window.addEventListener('offline', () => { handleOfflineEvent() });\n        window.addEventListener('online', () => { handleOnlineEvent() });\n        \n        const hideOfflineUnavailableProjects = () => {\n            const projects = document.querySelectorAll('.project')\n            caches.open('runtime-projects-media').then(projectsRuntimeCache => {\n                projects.forEach(project => {\n                    projectsRuntimeCache.keys().then(keys => {\n                        const projectMedia = keys.filter(key => key.url.indexOf(project.id) !== -1);\n                        if (!projectMedia.length) {\n                            // * reduce opacity of unavailable project pages\n                            project.classList.add('unavailable-offline');\n                        }\n                    });\n                });\n            });\n        }\n\n        const handleOfflineEvent = () => {\n            $mdToast.show(\n                $mdToast.simple().textContent('You are offline 📴')\n            );\n\n            hideOfflineUnavailableProjects();\n        }\n\n        const handleOnlineEvent = () => {\n            $mdToast.show(\n                $mdToast.simple().textContent('You are back online! 🎉')\n            );\n\n            const projects = document.querySelectorAll('.project');\n            projects.forEach(project => {\n                project.classList.remove('unavailable-offline');\n            });\n        }\n\n        // Detects if device is an iOS (including iOS 13) \n        const isIos = /iPad|iPhone|iPod/.test(navigator.userAgent) || (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);\n\n        // Detects if device is in standalone mode\n        const isInStandaloneMode = window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone === true;\n        \n    }\n\n})();\n(function(){\n    'use strict';\n\n    angular\n        .module('Portfolio')\n        .factory('ShareListener', [\"$mdToast\", function($mdToast) {\n            const copyToClipboard = function(str) {\n                const el = document.createElement('textarea');\n                el.value = str;\n                document.body.appendChild(el);\n                el.select();\n                document.execCommand('copy');\n                document.body.removeChild(el);\n                // show Toast message\n                $mdToast.show(\n                    $mdToast.simple()\n                    .textContent('Link copied to clipboard!')\n                    .hideDelay(2000)      \n                );\n            };\n\n            function listener($event) {\n                $event.preventDefault();\n                //cancel bubble\n                let _this = $event.currentTarget;\n                if (navigator.share) {\n                    navigator.share({\n                        title: 'CharisTheo',\n                        text: _this.children[0].textContent,\n                        url: _this.href,\n                    })\n                    .then(() => console.log('Successful share'))\n                    .catch((error) => console.log('Error sharing', error));\n                } else {\n                    // No share API found!\n                    // copy link to clipboard\n                    copyToClipboard(_this.href);\n                }\n                $event.cancelBubble = true; // prevent the card from toggling\n            }\n\n            return {\n                listener: listener,\n                copyToClipboard: copyToClipboard\n            }\n        }]);\n}());","(function(){\n    'use strict';\n\n    angular\n        .module('Portfolio')\n        .factory('ShareListener', [\"$mdToast\", function($mdToast) {\n            const copyToClipboard = function(str) {\n                const el = document.createElement('textarea');\n                el.value = str;\n                document.body.appendChild(el);\n                el.select();\n                document.execCommand('copy');\n                document.body.removeChild(el);\n                // show Toast message\n                $mdToast.show(\n                    $mdToast.simple()\n                    .textContent('Link copied to clipboard!')\n                    .hideDelay(2000)      \n                );\n            };\n\n            function listener($event) {\n                $event.preventDefault();\n                //cancel bubble\n                let _this = $event.currentTarget;\n                if (navigator.share) {\n                    navigator.share({\n                        title: 'CharisTheo',\n                        text: _this.children[0].textContent,\n                        url: _this.href,\n                    })\n                    .then(() => console.log('Successful share'))\n                    .catch((error) => console.log('Error sharing', error));\n                } else {\n                    // No share API found!\n                    // copy link to clipboard\n                    copyToClipboard(_this.href);\n                }\n                $event.cancelBubble = true; // prevent the card from toggling\n            }\n\n            return {\n                listener: listener,\n                copyToClipboard: copyToClipboard\n            }\n        }]);\n}());"]}