{"version":3,"sources":["app.js","portfolio.ctr.js","portfolio-bundle.min.js","share-listener.fac.js"],"names":["app","angular","module","config","$mdThemingProvider","theme","primaryPalette","accentPalette","directive","scope","restrict","templateUrl","onContactClick","link","elm","attrs","images","JSON","parse","selectedImage","selectImage","index","PortfolioCtrl","$scope","$http","$mdSidenav","$mdMedia","ShareListener","$location","$anchorScroll","$mdToast","get","then","response","projects","data","shareButtonListener","listener","copyToClipboard","nightMode","documentLoaded","cardToggle","selectedCardIndex","undefined","selectedCard","yOffset","toggleSocialLinks","showSocialLinks","isOpen","toggle","$watch","navigator","serviceWorker","register","registration","onupdatefound","show","textContent","newServiceWorker","onstatechange","state","controller","simple","console","log","error","setTimeout","eventAction","querySelectorAll","forEach","button","eventCategory","addEventListener","event","dataArr","eventLabel","split","splice","join","window","ga","hitType","selectCard","$event","$index","hash","url","cancelBubble","onFavouriteClick","_this","currentTarget","iconContent","children","toggleSideNav","document","caches","open","projectsRuntimeCache","project","keys","filter","key","indexOf","id","length","add","body","appendChild","remove","$inject","factory","str","el","createElement","value","select","execCommand","removeChild","hideDelay","preventDefault","share","title","text","href"],"mappings":"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","file":"portfolio-bundle.min.js","sourcesContent":["let app = angular.module('Portfolio', ['ngMaterial', 'ngAnimate']);\n    \napp\n.config(function($mdThemingProvider) {\n    $mdThemingProvider.theme('default')\n        .primaryPalette('deep-purple')\n        .accentPalette('green');\n})\n.directive('svgLogo', function() {\n    return {\n        scope: false,\n        restrict: 'E',\n        templateUrl: './../partials/compressed/svgLogo.html'\n    }\n})\n.directive('socialLinks', function() {\n    return {\n        scope: false,\n        restrict: 'E',\n        templateUrl: '/partials/compressed/socialLinks.html'\n    }\n})\n.directive('sideNavList', function() {\n    return {\n        scope: {\n            onContactClick: '&'\n        },\n        restrict: 'E',\n        templateUrl: '/partials/compressed/sidenavList.html',\n    }\n})\n.directive('imagePicker', function() {\n    return {\n        scope: false,\n        restrict: 'E',\n        templateUrl: '/partials/compressed/imagePicker.html',\n        link: function(scope, elm, attrs) {\n            if (!attrs.images) return;\n            scope.images = JSON.parse(attrs.images);\n            scope.selectedImage = 0;\n            scope.selectImage = function(index) {\n                scope.selectedImage = index;\n            }\n        }\n    }\n})\n.directive('frameworksImages', function() {\n    return {\n        scope: false,\n        restrict: 'E',\n        templateUrl: '/partials/compressed/frameworksImages.html',\n        link: function(scope, elm, attrs) {\n            if (!attrs.images) return;\n            scope.images = JSON.parse(attrs.images);\n        }\n    }\n});\n","(function(){\n    'use strict';\n\n    angular\n        .module('Portfolio')\n        .controller('PortfolioCtrl', PortfolioCtrl);\n\n    PortfolioCtrl.$inject = ['$scope', '$http', '$mdSidenav', '$mdMedia', 'ShareListener', '$location', '$anchorScroll', '$mdToast'];\n\n    function PortfolioCtrl($scope, $http, $mdSidenav, $mdMedia, ShareListener, $location, $anchorScroll, $mdToast) {\n        $http.get('projects-data.json').then(function(response) {\n            $scope.projects = response.data;\n        });\n        $scope.$mdMedia = $mdMedia;\n        $scope.shareButtonListener = ShareListener.listener;\n        $scope.copyToClipboard = ShareListener.copyToClipboard;\n        $scope.nightMode = false;\n        $scope.documentLoaded = false;\n        $scope.cardToggle = false;\n        $scope.selectedCardIndex = undefined;\n        $scope.selectedCard = undefined;\n        $anchorScroll.yOffset = 72;\n\n        $scope.toggleSocialLinks = function() {\n            $scope.showSocialLinks = !$scope.showSocialLinks;\n            // close side nav if open\n            if ($mdSidenav('left').isOpen) {\n                $mdSidenav('left').toggle();\n            }\n        };\n        // $scope.togglePeoplePerHourWidget = function() {\n        //     $scope.showPeoplePerHourWidget = !$scope.showPeoplePerHourWidget;\n        //     // close side nav if open\n        //     if ($mdSidenav('left').isOpen) {\n        //         $mdSidenav('left').toggle();\n        //     }\n        // };\n\n        $scope.$watch('$viewContentLoaded', function(){\n            const isNightModePreferred = $mdMedia('(prefers-color-scheme: dark)');\n            if (isNightModePreferred) {\n                $scope.nightMode = true;\n            }\n            $scope.documentLoaded = true;\n\n            if ('serviceWorker' in navigator) { \n                navigator.serviceWorker.register('/service-worker.js', {scope: '/'})\n                .then(function(registration) {\n                    registration.onupdatefound = () => {\n                        const newServiceWorker = registration.installing;\n                        newServiceWorker.onstatechange = () => {\n                            switch (newServiceWorker.state) {\n                                case 'installing': \n                                    if (navigator.serviceWorker.controller) {\n                                        $mdToast.show(\n                                            $mdToast\n                                              .simple()\n                                              .textContent('A new version of the website is available ðŸ™‹. <a onclick=\"window.location.reload()\">Reload</a> the page to see the new goodness ðŸ’ ')\n                                        );\n                                    }\n                            }\n                        }\n                    }\n                    console.log('Service Worker registration succeeded. Scope is ' + registration.scope);\n                    \n                }).catch(function(error) {\n                    console.log('Service Worker registration failed with ' + error);\n                });\n            }\n\n            // * Attach event listeners for sending data to google analytics\n            setTimeout(() => {\n                document.querySelectorAll('.md-button').forEach(button => {\n                    button.addEventListener('click', (event) => {\n                        const data = event.currentTarget.getAttribute('data-analytics');\n                        const dataArr = data.split(' ');\n                        const eventCategory = dataArr.splice(0, 1)[0];\n                        const eventLabel = dataArr.join(' ');\n\n                        window.ga('send', {\n                            hitType: 'event',\n                            eventAction: 'click',\n                            eventCategory,\n                            eventLabel\n                        });\n                    });\n                });\n            }, 1000);\n        });\n\n        $scope.selectCard = function($event, $index) {\n            if ($scope.selectedCardIndex != $index) {\n                // select card\n                $scope.selectedCard = $scope.projects[$index];\n                $scope.selectedCardIndex = $index;\n                // scroll to top of card\n                $location.hash(\"project\" + $index);\n                $anchorScroll(\"project\" + $index);\n            } else {\n                // unselect card\n                $scope.selectedCardIndex = undefined;\n                $scope.selectedCard = undefined;\n                $location.url('');\n            }\n            $event.cancelBubble = true; // prevent from firing again\n        };\n\n        $scope.onFavouriteClick = function($event) {\n            // TODO: Add animation transition\n            let _this = $event.currentTarget;\n            let iconContent = _this.children[0].textContent;\n            console.log(iconContent);\n            if (iconContent == 'favorite') {\n                _this.children[0].textContent = 'favorite_border';\n            } else {\n                _this.children[0].textContent = 'favorite';\n            }\n            $event.cancelBubble = true; // prevent the card from toggling\n        };\n\n        $scope.toggleSideNav = function() {\n            $mdSidenav('left').toggle();\n        };\n\n        window.addEventListener('offline', function() {\n            $mdToast.show(\n                $mdToast\n                    .simple()\n                    .textContent('You are offline ðŸ“´')\n            );\n\n            const projects = document.querySelectorAll('.project')\n            caches.open('runtime-projects-media').then(projectsRuntimeCache => {\n                projects.forEach(project => {\n                    projectsRuntimeCache.keys().then(keys => {\n                        const projectMedia = keys.filter(key => key.url.indexOf(project.id) !== -1);\n                        if (!projectMedia.length) {\n                            // * reduce opacity of unavailable project pages\n                            project.classList.add('unavailable-offline');\n                        }\n                    });\n                });\n            });\n        });\n\n        window.addEventListener('online', function() {\n            $mdToast.show(\n                $mdToast\n                    .simple()\n                    .textContent('You are back online! ðŸŽ‰')\n            );\n            const projects = document.querySelectorAll('.project');\n            projects.forEach(project => {\n                project.classList.remove('unavailable-offline');\n            });\n        });\n        \n    }\n\n})();","let app = angular.module('Portfolio', ['ngMaterial', 'ngAnimate']);\n    \napp\n.config([\"$mdThemingProvider\", function($mdThemingProvider) {\n    $mdThemingProvider.theme('default')\n        .primaryPalette('deep-purple')\n        .accentPalette('green');\n}])\n.directive('svgLogo', function() {\n    return {\n        scope: false,\n        restrict: 'E',\n        templateUrl: './../partials/compressed/svgLogo.html'\n    }\n})\n.directive('socialLinks', function() {\n    return {\n        scope: false,\n        restrict: 'E',\n        templateUrl: '/partials/compressed/socialLinks.html'\n    }\n})\n.directive('sideNavList', function() {\n    return {\n        scope: {\n            onContactClick: '&'\n        },\n        restrict: 'E',\n        templateUrl: '/partials/compressed/sidenavList.html',\n    }\n})\n.directive('imagePicker', function() {\n    return {\n        scope: false,\n        restrict: 'E',\n        templateUrl: '/partials/compressed/imagePicker.html',\n        link: function(scope, elm, attrs) {\n            if (!attrs.images) return;\n            scope.images = JSON.parse(attrs.images);\n            scope.selectedImage = 0;\n            scope.selectImage = function(index) {\n                scope.selectedImage = index;\n            }\n        }\n    }\n})\n.directive('frameworksImages', function() {\n    return {\n        scope: false,\n        restrict: 'E',\n        templateUrl: '/partials/compressed/frameworksImages.html',\n        link: function(scope, elm, attrs) {\n            if (!attrs.images) return;\n            scope.images = JSON.parse(attrs.images);\n        }\n    }\n});\n\n(function(){\n    'use strict';\n\n    angular\n        .module('Portfolio')\n        .controller('PortfolioCtrl', PortfolioCtrl);\n\n    PortfolioCtrl.$inject = ['$scope', '$http', '$mdSidenav', '$mdMedia', 'ShareListener', '$location', '$anchorScroll', '$mdToast'];\n\n    function PortfolioCtrl($scope, $http, $mdSidenav, $mdMedia, ShareListener, $location, $anchorScroll, $mdToast) {\n        $http.get('projects-data.json').then(function(response) {\n            $scope.projects = response.data;\n        });\n        $scope.$mdMedia = $mdMedia;\n        $scope.shareButtonListener = ShareListener.listener;\n        $scope.copyToClipboard = ShareListener.copyToClipboard;\n        $scope.nightMode = false;\n        $scope.documentLoaded = false;\n        $scope.cardToggle = false;\n        $scope.selectedCardIndex = undefined;\n        $scope.selectedCard = undefined;\n        $anchorScroll.yOffset = 72;\n\n        $scope.toggleSocialLinks = function() {\n            $scope.showSocialLinks = !$scope.showSocialLinks;\n            // close side nav if open\n            if ($mdSidenav('left').isOpen) {\n                $mdSidenav('left').toggle();\n            }\n        };\n        // $scope.togglePeoplePerHourWidget = function() {\n        //     $scope.showPeoplePerHourWidget = !$scope.showPeoplePerHourWidget;\n        //     // close side nav if open\n        //     if ($mdSidenav('left').isOpen) {\n        //         $mdSidenav('left').toggle();\n        //     }\n        // };\n\n        $scope.$watch('$viewContentLoaded', function(){\n            const isNightModePreferred = $mdMedia('(prefers-color-scheme: dark)');\n            if (isNightModePreferred) {\n                $scope.nightMode = true;\n            }\n            $scope.documentLoaded = true;\n\n            if ('serviceWorker' in navigator) { \n                navigator.serviceWorker.register('/service-worker.js', {scope: '/'})\n                .then(function(registration) {\n                    registration.onupdatefound = () => {\n                        const newServiceWorker = registration.installing;\n                        newServiceWorker.onstatechange = () => {\n                            switch (newServiceWorker.state) {\n                                case 'installing': \n                                    if (navigator.serviceWorker.controller) {\n                                        $mdToast.show(\n                                            $mdToast\n                                              .simple()\n                                              .textContent('A new version of the website is available ðŸ™‹. <a onclick=\"window.location.reload()\">Reload</a> the page to see the new goodness ðŸ’ ')\n                                        );\n                                    }\n                            }\n                        }\n                    }\n                    console.log('Service Worker registration succeeded. Scope is ' + registration.scope);\n                    \n                }).catch(function(error) {\n                    console.log('Service Worker registration failed with ' + error);\n                });\n            }\n\n            // * Attach event listeners for sending data to google analytics\n            setTimeout(() => {\n                document.querySelectorAll('.md-button').forEach(button => {\n                    button.addEventListener('click', (event) => {\n                        const data = event.currentTarget.getAttribute('data-analytics');\n                        const dataArr = data.split(' ');\n                        const eventCategory = dataArr.splice(0, 1)[0];\n                        const eventLabel = dataArr.join(' ');\n\n                        window.ga('send', {\n                            hitType: 'event',\n                            eventAction: 'click',\n                            eventCategory,\n                            eventLabel\n                        });\n                    });\n                });\n            }, 1000);\n        });\n\n        $scope.selectCard = function($event, $index) {\n            if ($scope.selectedCardIndex != $index) {\n                // select card\n                $scope.selectedCard = $scope.projects[$index];\n                $scope.selectedCardIndex = $index;\n                // scroll to top of card\n                $location.hash(\"project\" + $index);\n                $anchorScroll(\"project\" + $index);\n            } else {\n                // unselect card\n                $scope.selectedCardIndex = undefined;\n                $scope.selectedCard = undefined;\n                $location.url('');\n            }\n            $event.cancelBubble = true; // prevent from firing again\n        };\n\n        $scope.onFavouriteClick = function($event) {\n            // TODO: Add animation transition\n            let _this = $event.currentTarget;\n            let iconContent = _this.children[0].textContent;\n            console.log(iconContent);\n            if (iconContent == 'favorite') {\n                _this.children[0].textContent = 'favorite_border';\n            } else {\n                _this.children[0].textContent = 'favorite';\n            }\n            $event.cancelBubble = true; // prevent the card from toggling\n        };\n\n        $scope.toggleSideNav = function() {\n            $mdSidenav('left').toggle();\n        };\n\n        window.addEventListener('offline', function() {\n            $mdToast.show(\n                $mdToast\n                    .simple()\n                    .textContent('You are offline ðŸ“´')\n            );\n\n            const projects = document.querySelectorAll('.project')\n            caches.open('runtime-projects-media').then(projectsRuntimeCache => {\n                projects.forEach(project => {\n                    projectsRuntimeCache.keys().then(keys => {\n                        const projectMedia = keys.filter(key => key.url.indexOf(project.id) !== -1);\n                        if (!projectMedia.length) {\n                            // * reduce opacity of unavailable project pages\n                            project.classList.add('unavailable-offline');\n                        }\n                    });\n                });\n            });\n        });\n\n        window.addEventListener('online', function() {\n            $mdToast.show(\n                $mdToast\n                    .simple()\n                    .textContent('You are back online! ðŸŽ‰')\n            );\n            const projects = document.querySelectorAll('.project');\n            projects.forEach(project => {\n                project.classList.remove('unavailable-offline');\n            });\n        });\n        \n    }\n\n})();\n(function(){\n    'use strict';\n\n    angular\n        .module('Portfolio')\n        .factory('ShareListener', [\"$mdToast\", function($mdToast) {\n            const copyToClipboard = function(str) {\n                const el = document.createElement('textarea');\n                el.value = str;\n                document.body.appendChild(el);\n                el.select();\n                document.execCommand('copy');\n                document.body.removeChild(el);\n                // show Toast message\n                $mdToast.show(\n                    $mdToast.simple()\n                    .textContent('Link copied to clipboard!')\n                    .hideDelay(2000)      \n                );\n            };\n\n            function listener($event) {\n                $event.preventDefault();\n                //cancel bubble\n                let _this = $event.currentTarget;\n                if (navigator.share) {\n                    navigator.share({\n                        title: 'CharisTheo',\n                        text: _this.children[0].textContent,\n                        url: _this.href,\n                    })\n                    .then(() => console.log('Successful share'))\n                    .catch((error) => console.log('Error sharing', error));\n                } else {\n                    // No share API found!\n                    // copy link to clipboard\n                    copyToClipboard(_this.href);\n                }\n                $event.cancelBubble = true; // prevent the card from toggling\n            }\n\n            return {\n                listener: listener,\n                copyToClipboard: copyToClipboard\n            }\n        }]);\n}());","(function(){\n    'use strict';\n\n    angular\n        .module('Portfolio')\n        .factory('ShareListener', [\"$mdToast\", function($mdToast) {\n            const copyToClipboard = function(str) {\n                const el = document.createElement('textarea');\n                el.value = str;\n                document.body.appendChild(el);\n                el.select();\n                document.execCommand('copy');\n                document.body.removeChild(el);\n                // show Toast message\n                $mdToast.show(\n                    $mdToast.simple()\n                    .textContent('Link copied to clipboard!')\n                    .hideDelay(2000)      \n                );\n            };\n\n            function listener($event) {\n                $event.preventDefault();\n                //cancel bubble\n                let _this = $event.currentTarget;\n                if (navigator.share) {\n                    navigator.share({\n                        title: 'CharisTheo',\n                        text: _this.children[0].textContent,\n                        url: _this.href,\n                    })\n                    .then(() => console.log('Successful share'))\n                    .catch((error) => console.log('Error sharing', error));\n                } else {\n                    // No share API found!\n                    // copy link to clipboard\n                    copyToClipboard(_this.href);\n                }\n                $event.cancelBubble = true; // prevent the card from toggling\n            }\n\n            return {\n                listener: listener,\n                copyToClipboard: copyToClipboard\n            }\n        }]);\n}());"]}